/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Client {
  export type EVMTokenAmountStruct = { token: string; amount: BigNumberish };

  export type EVMTokenAmountStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type EVM2AnyMessageStruct = {
    receiver: BytesLike;
    data: BytesLike;
    tokenAmounts: Client.EVMTokenAmountStruct[];
    feeToken: string;
    extraArgs: BytesLike;
  };

  export type EVM2AnyMessageStructOutput = [
    string,
    string,
    Client.EVMTokenAmountStructOutput[],
    string,
    string
  ] & {
    receiver: string;
    data: string;
    tokenAmounts: Client.EVMTokenAmountStructOutput[];
    feeToken: string;
    extraArgs: string;
  };
}

export declare namespace INFT {
  export type WorldcoinVerifiedActionStruct = {
    signal: string;
    root: BigNumberish;
    nullifierHash: BigNumberish;
    proof: BigNumberish[];
  };

  export type WorldcoinVerifiedActionStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber[]
  ] & {
    signal: string;
    root: BigNumber;
    nullifierHash: BigNumber;
    proof: BigNumber[];
  };
}

export interface NFTInterface extends utils.Interface {
  functions: {
    "CCIP_BnM()": FunctionFragment;
    "LINK()": FunctionFragment;
    "WETH()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "ccipRouter()": FunctionFragment;
    "combine(uint256[])": FunctionFragment;
    "convertETH2WETH(uint256)": FunctionFragment;
    "destinationChainSelector()": FunctionFragment;
    "fulfillMintWords(address,string[])": FunctionFragment;
    "fulfilledDraws(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getCCIPFee((bytes,bytes,(address,uint256)[],address,bytes))": FunctionFragment;
    "getCCIPMessage(address,uint256)": FunctionFragment;
    "getSentence(uint256)": FunctionFragment;
    "getWords(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(string,(address,uint256,uint256,uint256[8]))": FunctionFragment;
    "mintNFTCost()": FunctionFragment;
    "mintWords()": FunctionFragment;
    "mintWordsCost()": FunctionFragment;
    "mintWordsV2()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "sendTreasuryToMainnet()": FunctionFragment;
    "sendTreasuryToMainnetBnM()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setConnectedWordList(address)": FunctionFragment;
    "setDestinationChainSelector(uint64)": FunctionFragment;
    "setMintCosts(uint256,uint256)": FunctionFragment;
    "setTreasuryAddressOnMainnet(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAddressOnMainnet()": FunctionFragment;
    "verifyWithWorldcoin((address,uint256,uint256,uint256[8]))": FunctionFragment;
    "wordList()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CCIP_BnM"
      | "LINK"
      | "WETH"
      | "approve"
      | "balanceOf"
      | "ccipRouter"
      | "combine"
      | "convertETH2WETH"
      | "destinationChainSelector"
      | "fulfillMintWords"
      | "fulfilledDraws"
      | "getApproved"
      | "getCCIPFee"
      | "getCCIPMessage"
      | "getSentence"
      | "getWords"
      | "isApprovedForAll"
      | "mint"
      | "mintNFTCost"
      | "mintWords"
      | "mintWordsCost"
      | "mintWordsV2"
      | "name"
      | "owner"
      | "ownerOf"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "sendTreasuryToMainnet"
      | "sendTreasuryToMainnetBnM"
      | "setApprovalForAll"
      | "setConnectedWordList"
      | "setDestinationChainSelector"
      | "setMintCosts"
      | "setTreasuryAddressOnMainnet"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "treasuryAddressOnMainnet"
      | "verifyWithWorldcoin"
      | "wordList"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "CCIP_BnM", values?: undefined): string;
  encodeFunctionData(functionFragment: "LINK", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ccipRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "combine",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "convertETH2WETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destinationChainSelector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillMintWords",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfilledDraws",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCCIPFee",
    values: [Client.EVM2AnyMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getCCIPMessage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSentence",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getWords", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, INFT.WorldcoinVerifiedActionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNFTCost",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mintWords", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintWordsCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintWordsV2",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTreasuryToMainnet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendTreasuryToMainnetBnM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setConnectedWordList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDestinationChainSelector",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintCosts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddressOnMainnet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddressOnMainnet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyWithWorldcoin",
    values: [INFT.WorldcoinVerifiedActionStruct]
  ): string;
  encodeFunctionData(functionFragment: "wordList", values?: undefined): string;

  decodeFunctionResult(functionFragment: "CCIP_BnM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LINK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ccipRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "combine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertETH2WETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destinationChainSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillMintWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfilledDraws",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCCIPFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCCIPMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSentence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWords", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintNFTCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintWords", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWordsCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWordsV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendTreasuryToMainnet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendTreasuryToMainnetBnM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConnectedWordList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDestinationChainSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintCosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddressOnMainnet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddressOnMainnet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyWithWorldcoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wordList", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BatchMetadataUpdate(uint256,uint256)": EventFragment;
    "MessageSent(bytes32)": EventFragment;
    "MetadataUpdate(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchMetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BatchMetadataUpdateEventObject {
  _fromTokenId: BigNumber;
  _toTokenId: BigNumber;
}
export type BatchMetadataUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  BatchMetadataUpdateEventObject
>;

export type BatchMetadataUpdateEventFilter =
  TypedEventFilter<BatchMetadataUpdateEvent>;

export interface MessageSentEventObject {
  messageId: string;
}
export type MessageSentEvent = TypedEvent<[string], MessageSentEventObject>;

export type MessageSentEventFilter = TypedEventFilter<MessageSentEvent>;

export interface MetadataUpdateEventObject {
  _tokenId: BigNumber;
}
export type MetadataUpdateEvent = TypedEvent<
  [BigNumber],
  MetadataUpdateEventObject
>;

export type MetadataUpdateEventFilter = TypedEventFilter<MetadataUpdateEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface NFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CCIP_BnM(overrides?: CallOverrides): Promise<[string]>;

    LINK(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    ccipRouter(overrides?: CallOverrides): Promise<[string]>;

    combine(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    convertETH2WETH(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    destinationChainSelector(overrides?: CallOverrides): Promise<[BigNumber]>;

    fulfillMintWords(
      user: string,
      words: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fulfilledDraws(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCCIPFee(
      message: Client.EVM2AnyMessageStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    getCCIPMessage(
      transferToken: string,
      transferAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [Client.EVM2AnyMessageStructOutput] & {
        message: Client.EVM2AnyMessageStructOutput;
      }
    >;

    getSentence(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWords(user: string, overrides?: CallOverrides): Promise<[string[]]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      _tokenURI: string,
      wva: INFT.WorldcoinVerifiedActionStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintNFTCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintWords(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintWordsCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintWordsV2(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sendTreasuryToMainnet(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    sendTreasuryToMainnetBnM(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setConnectedWordList(
      _wordList: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDestinationChainSelector(
      _destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMintCosts(
      _mintNFTCost: BigNumberish,
      _mintWordsCost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTreasuryAddressOnMainnet(
      _treasury: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    treasuryAddressOnMainnet(overrides?: CallOverrides): Promise<[string]>;

    verifyWithWorldcoin(
      wva: INFT.WorldcoinVerifiedActionStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    wordList(overrides?: CallOverrides): Promise<[string]>;
  };

  CCIP_BnM(overrides?: CallOverrides): Promise<string>;

  LINK(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  ccipRouter(overrides?: CallOverrides): Promise<string>;

  combine(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  convertETH2WETH(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  destinationChainSelector(overrides?: CallOverrides): Promise<BigNumber>;

  fulfillMintWords(
    user: string,
    words: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fulfilledDraws(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCCIPFee(
    message: Client.EVM2AnyMessageStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCCIPMessage(
    transferToken: string,
    transferAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Client.EVM2AnyMessageStructOutput>;

  getSentence(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getWords(user: string, overrides?: CallOverrides): Promise<string[]>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    _tokenURI: string,
    wva: INFT.WorldcoinVerifiedActionStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintNFTCost(overrides?: CallOverrides): Promise<BigNumber>;

  mintWords(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintWordsCost(overrides?: CallOverrides): Promise<BigNumber>;

  mintWordsV2(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sendTreasuryToMainnet(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  sendTreasuryToMainnetBnM(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setConnectedWordList(
    _wordList: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDestinationChainSelector(
    _destinationChainSelector: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMintCosts(
    _mintNFTCost: BigNumberish,
    _mintWordsCost: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTreasuryAddressOnMainnet(
    _treasury: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  treasuryAddressOnMainnet(overrides?: CallOverrides): Promise<string>;

  verifyWithWorldcoin(
    wva: INFT.WorldcoinVerifiedActionStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  wordList(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CCIP_BnM(overrides?: CallOverrides): Promise<string>;

    LINK(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    ccipRouter(overrides?: CallOverrides): Promise<string>;

    combine(tokenIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    convertETH2WETH(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    destinationChainSelector(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillMintWords(
      user: string,
      words: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    fulfilledDraws(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCCIPFee(
      message: Client.EVM2AnyMessageStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCCIPMessage(
      transferToken: string,
      transferAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Client.EVM2AnyMessageStructOutput>;

    getSentence(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getWords(user: string, overrides?: CallOverrides): Promise<string[]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      _tokenURI: string,
      wva: INFT.WorldcoinVerifiedActionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mintNFTCost(overrides?: CallOverrides): Promise<BigNumber>;

    mintWords(overrides?: CallOverrides): Promise<void>;

    mintWordsCost(overrides?: CallOverrides): Promise<BigNumber>;

    mintWordsV2(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendTreasuryToMainnet(overrides?: CallOverrides): Promise<void>;

    sendTreasuryToMainnetBnM(overrides?: CallOverrides): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setConnectedWordList(
      _wordList: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDestinationChainSelector(
      _destinationChainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintCosts(
      _mintNFTCost: BigNumberish,
      _mintWordsCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddressOnMainnet(
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddressOnMainnet(overrides?: CallOverrides): Promise<string>;

    verifyWithWorldcoin(
      wva: INFT.WorldcoinVerifiedActionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    wordList(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BatchMetadataUpdate(uint256,uint256)"(
      _fromTokenId?: null,
      _toTokenId?: null
    ): BatchMetadataUpdateEventFilter;
    BatchMetadataUpdate(
      _fromTokenId?: null,
      _toTokenId?: null
    ): BatchMetadataUpdateEventFilter;

    "MessageSent(bytes32)"(
      messageId?: BytesLike | null
    ): MessageSentEventFilter;
    MessageSent(messageId?: BytesLike | null): MessageSentEventFilter;

    "MetadataUpdate(uint256)"(_tokenId?: null): MetadataUpdateEventFilter;
    MetadataUpdate(_tokenId?: null): MetadataUpdateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    CCIP_BnM(overrides?: CallOverrides): Promise<BigNumber>;

    LINK(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    ccipRouter(overrides?: CallOverrides): Promise<BigNumber>;

    combine(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    convertETH2WETH(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    destinationChainSelector(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillMintWords(
      user: string,
      words: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fulfilledDraws(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCCIPFee(
      message: Client.EVM2AnyMessageStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCCIPMessage(
      transferToken: string,
      transferAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSentence(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWords(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _tokenURI: string,
      wva: INFT.WorldcoinVerifiedActionStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    mintNFTCost(overrides?: CallOverrides): Promise<BigNumber>;

    mintWords(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    mintWordsCost(overrides?: CallOverrides): Promise<BigNumber>;

    mintWordsV2(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sendTreasuryToMainnet(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    sendTreasuryToMainnetBnM(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setConnectedWordList(
      _wordList: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDestinationChainSelector(
      _destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMintCosts(
      _mintNFTCost: BigNumberish,
      _mintWordsCost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTreasuryAddressOnMainnet(
      _treasury: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    treasuryAddressOnMainnet(overrides?: CallOverrides): Promise<BigNumber>;

    verifyWithWorldcoin(
      wva: INFT.WorldcoinVerifiedActionStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    wordList(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CCIP_BnM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LINK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ccipRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    combine(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    convertETH2WETH(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    destinationChainSelector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillMintWords(
      user: string,
      words: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fulfilledDraws(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCCIPFee(
      message: Client.EVM2AnyMessageStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCCIPMessage(
      transferToken: string,
      transferAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSentence(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWords(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _tokenURI: string,
      wva: INFT.WorldcoinVerifiedActionStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintNFTCost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintWords(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintWordsCost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintWordsV2(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sendTreasuryToMainnet(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sendTreasuryToMainnetBnM(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setConnectedWordList(
      _wordList: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDestinationChainSelector(
      _destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMintCosts(
      _mintNFTCost: BigNumberish,
      _mintWordsCost: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddressOnMainnet(
      _treasury: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    treasuryAddressOnMainnet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyWithWorldcoin(
      wva: INFT.WorldcoinVerifiedActionStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    wordList(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
