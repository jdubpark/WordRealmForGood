/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface WordListVRFAPI3Interface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "airnode()": FunctionFragment;
    "airnodeRequests(bytes32)": FunctionFragment;
    "airnodeRrp()": FunctionFragment;
    "connectedNFT()": FunctionFragment;
    "emptyWordbank(string)": FunctionFragment;
    "endpointIdUint256()": FunctionFragment;
    "endpointIdUint256Array()": FunctionFragment;
    "fulfillUint256Array(bytes32,bytes)": FunctionFragment;
    "getRequestStatus(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "readWordbank(string)": FunctionFragment;
    "readWordsize()": FunctionFragment;
    "replaceWordbank(string,string[])": FunctionFragment;
    "requestRandomWordFromBank(address)": FunctionFragment;
    "setConnectedNFT(address)": FunctionFragment;
    "setRequestParameters(address,bytes32,bytes32,address)": FunctionFragment;
    "setWordsize(uint256)": FunctionFragment;
    "sponsorWallet()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "airnode"
      | "airnodeRequests"
      | "airnodeRrp"
      | "connectedNFT"
      | "emptyWordbank"
      | "endpointIdUint256"
      | "endpointIdUint256Array"
      | "fulfillUint256Array"
      | "getRequestStatus"
      | "owner"
      | "readWordbank"
      | "readWordsize"
      | "replaceWordbank"
      | "requestRandomWordFromBank"
      | "setConnectedNFT"
      | "setRequestParameters"
      | "setWordsize"
      | "sponsorWallet"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "airnode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "airnodeRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "airnodeRrp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectedNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emptyWordbank",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "endpointIdUint256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endpointIdUint256Array",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillUint256Array",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readWordbank",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "readWordsize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replaceWordbank",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomWordFromBank",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setConnectedNFT",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestParameters",
    values: [string, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWordsize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "airnode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "airnodeRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "airnodeRrp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "connectedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emptyWordbank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endpointIdUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endpointIdUint256Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillUint256Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readWordbank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readWordsize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceWordbank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomWordFromBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConnectedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWordsize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReceivedUint256(bytes32,uint256)": EventFragment;
    "ReceivedUint256Array(bytes32,uint256[])": EventFragment;
    "RequestedUint256(bytes32)": EventFragment;
    "RequestedUint256Array(bytes32,uint256)": EventFragment;
    "WithdrawalRequested(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedUint256"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedUint256Array"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedUint256"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedUint256Array"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalRequested"): EventFragment;
}

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReceivedUint256EventObject {
  requestId: string;
  response: BigNumber;
}
export type ReceivedUint256Event = TypedEvent<
  [string, BigNumber],
  ReceivedUint256EventObject
>;

export type ReceivedUint256EventFilter = TypedEventFilter<ReceivedUint256Event>;

export interface ReceivedUint256ArrayEventObject {
  requestId: string;
  response: BigNumber[];
}
export type ReceivedUint256ArrayEvent = TypedEvent<
  [string, BigNumber[]],
  ReceivedUint256ArrayEventObject
>;

export type ReceivedUint256ArrayEventFilter =
  TypedEventFilter<ReceivedUint256ArrayEvent>;

export interface RequestedUint256EventObject {
  requestId: string;
}
export type RequestedUint256Event = TypedEvent<
  [string],
  RequestedUint256EventObject
>;

export type RequestedUint256EventFilter =
  TypedEventFilter<RequestedUint256Event>;

export interface RequestedUint256ArrayEventObject {
  requestId: string;
  size: BigNumber;
}
export type RequestedUint256ArrayEvent = TypedEvent<
  [string, BigNumber],
  RequestedUint256ArrayEventObject
>;

export type RequestedUint256ArrayEventFilter =
  TypedEventFilter<RequestedUint256ArrayEvent>;

export interface WithdrawalRequestedEventObject {
  airnode: string;
  sponsorWallet: string;
}
export type WithdrawalRequestedEvent = TypedEvent<
  [string, string],
  WithdrawalRequestedEventObject
>;

export type WithdrawalRequestedEventFilter =
  TypedEventFilter<WithdrawalRequestedEvent>;

export interface WordListVRFAPI3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WordListVRFAPI3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    airnode(overrides?: CallOverrides): Promise<[string]>;

    airnodeRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean, boolean] & {
        requester: string;
        expectFulfill: boolean;
        fulfilled: boolean;
        exists: boolean;
      }
    >;

    airnodeRrp(overrides?: CallOverrides): Promise<[string]>;

    connectedNFT(overrides?: CallOverrides): Promise<[string]>;

    emptyWordbank(
      category: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    endpointIdUint256(overrides?: CallOverrides): Promise<[string]>;

    endpointIdUint256Array(overrides?: CallOverrides): Promise<[string]>;

    fulfillUint256Array(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRequestStatus(
      requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber[]] & { fulfilled: boolean; randomWords: BigNumber[] }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    readWordbank(
      category: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    readWordsize(overrides?: CallOverrides): Promise<[BigNumber]>;

    replaceWordbank(
      category: string,
      words: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    requestRandomWordFromBank(
      requester: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setConnectedNFT(
      _connectedNFT: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRequestParameters(
      _airnode: string,
      _endpointIdUint256: BytesLike,
      _endpointIdUint256Array: BytesLike,
      _sponsorWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWordsize(
      _wordsize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sponsorWallet(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  airnode(overrides?: CallOverrides): Promise<string>;

  airnodeRequests(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, boolean, boolean] & {
      requester: string;
      expectFulfill: boolean;
      fulfilled: boolean;
      exists: boolean;
    }
  >;

  airnodeRrp(overrides?: CallOverrides): Promise<string>;

  connectedNFT(overrides?: CallOverrides): Promise<string>;

  emptyWordbank(
    category: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  endpointIdUint256(overrides?: CallOverrides): Promise<string>;

  endpointIdUint256Array(overrides?: CallOverrides): Promise<string>;

  fulfillUint256Array(
    requestId: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRequestStatus(
    requestId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber[]] & { fulfilled: boolean; randomWords: BigNumber[] }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  readWordbank(category: string, overrides?: CallOverrides): Promise<string[]>;

  readWordsize(overrides?: CallOverrides): Promise<BigNumber>;

  replaceWordbank(
    category: string,
    words: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  requestRandomWordFromBank(
    requester: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setConnectedNFT(
    _connectedNFT: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRequestParameters(
    _airnode: string,
    _endpointIdUint256: BytesLike,
    _endpointIdUint256Array: BytesLike,
    _sponsorWallet: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWordsize(
    _wordsize: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sponsorWallet(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    airnode(overrides?: CallOverrides): Promise<string>;

    airnodeRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean, boolean] & {
        requester: string;
        expectFulfill: boolean;
        fulfilled: boolean;
        exists: boolean;
      }
    >;

    airnodeRrp(overrides?: CallOverrides): Promise<string>;

    connectedNFT(overrides?: CallOverrides): Promise<string>;

    emptyWordbank(category: string, overrides?: CallOverrides): Promise<void>;

    endpointIdUint256(overrides?: CallOverrides): Promise<string>;

    endpointIdUint256Array(overrides?: CallOverrides): Promise<string>;

    fulfillUint256Array(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getRequestStatus(
      requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber[]] & { fulfilled: boolean; randomWords: BigNumber[] }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    readWordbank(
      category: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    readWordsize(overrides?: CallOverrides): Promise<BigNumber>;

    replaceWordbank(
      category: string,
      words: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    requestRandomWordFromBank(
      requester: string,
      overrides?: CallOverrides
    ): Promise<[string, string[]] & { requestId: string }>;

    setConnectedNFT(
      _connectedNFT: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequestParameters(
      _airnode: string,
      _endpointIdUint256: BytesLike,
      _endpointIdUint256Array: BytesLike,
      _sponsorWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWordsize(
      _wordsize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sponsorWallet(overrides?: CallOverrides): Promise<string>;

    transferOwnership(to: string, overrides?: CallOverrides): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferRequested(address,address)"(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferredEventFilter;

    "ReceivedUint256(bytes32,uint256)"(
      requestId?: BytesLike | null,
      response?: null
    ): ReceivedUint256EventFilter;
    ReceivedUint256(
      requestId?: BytesLike | null,
      response?: null
    ): ReceivedUint256EventFilter;

    "ReceivedUint256Array(bytes32,uint256[])"(
      requestId?: BytesLike | null,
      response?: null
    ): ReceivedUint256ArrayEventFilter;
    ReceivedUint256Array(
      requestId?: BytesLike | null,
      response?: null
    ): ReceivedUint256ArrayEventFilter;

    "RequestedUint256(bytes32)"(
      requestId?: BytesLike | null
    ): RequestedUint256EventFilter;
    RequestedUint256(requestId?: BytesLike | null): RequestedUint256EventFilter;

    "RequestedUint256Array(bytes32,uint256)"(
      requestId?: BytesLike | null,
      size?: null
    ): RequestedUint256ArrayEventFilter;
    RequestedUint256Array(
      requestId?: BytesLike | null,
      size?: null
    ): RequestedUint256ArrayEventFilter;

    "WithdrawalRequested(address,address)"(
      airnode?: string | null,
      sponsorWallet?: string | null
    ): WithdrawalRequestedEventFilter;
    WithdrawalRequested(
      airnode?: string | null,
      sponsorWallet?: string | null
    ): WithdrawalRequestedEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    airnode(overrides?: CallOverrides): Promise<BigNumber>;

    airnodeRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    airnodeRrp(overrides?: CallOverrides): Promise<BigNumber>;

    connectedNFT(overrides?: CallOverrides): Promise<BigNumber>;

    emptyWordbank(
      category: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    endpointIdUint256(overrides?: CallOverrides): Promise<BigNumber>;

    endpointIdUint256Array(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillUint256Array(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getRequestStatus(
      requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    readWordbank(
      category: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readWordsize(overrides?: CallOverrides): Promise<BigNumber>;

    replaceWordbank(
      category: string,
      words: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    requestRandomWordFromBank(
      requester: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    setConnectedNFT(
      _connectedNFT: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRequestParameters(
      _airnode: string,
      _endpointIdUint256: BytesLike,
      _endpointIdUint256Array: BytesLike,
      _sponsorWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWordsize(
      _wordsize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sponsorWallet(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    airnode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airnodeRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    airnodeRrp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectedNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emptyWordbank(
      category: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    endpointIdUint256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endpointIdUint256Array(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillUint256Array(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRequestStatus(
      requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readWordbank(
      category: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readWordsize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    replaceWordbank(
      category: string,
      words: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    requestRandomWordFromBank(
      requester: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setConnectedNFT(
      _connectedNFT: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRequestParameters(
      _airnode: string,
      _endpointIdUint256: BytesLike,
      _endpointIdUint256Array: BytesLike,
      _sponsorWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWordsize(
      _wordsize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sponsorWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
