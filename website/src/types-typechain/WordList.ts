/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface WordListInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "connectedNFT()": FunctionFragment;
    "emptyWordbank(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "readWordbank(string)": FunctionFragment;
    "readWordsize()": FunctionFragment;
    "replaceWordbank(string,string[])": FunctionFragment;
    "requestRandomWordFromBank(address)": FunctionFragment;
    "setConnectedNFT(address)": FunctionFragment;
    "setWordsize(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "connectedNFT"
      | "emptyWordbank"
      | "owner"
      | "readWordbank"
      | "readWordsize"
      | "replaceWordbank"
      | "requestRandomWordFromBank"
      | "setConnectedNFT"
      | "setWordsize"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectedNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emptyWordbank",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readWordbank",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "readWordsize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replaceWordbank",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomWordFromBank",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setConnectedNFT",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWordsize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emptyWordbank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readWordbank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readWordsize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceWordbank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomWordFromBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConnectedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWordsize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WordList extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WordListInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    connectedNFT(overrides?: CallOverrides): Promise<[string]>;

    emptyWordbank(
      category: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    readWordbank(
      category: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    readWordsize(overrides?: CallOverrides): Promise<[BigNumber]>;

    replaceWordbank(
      category: string,
      words: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    requestRandomWordFromBank(
      arg0: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setConnectedNFT(
      _connectedNFT: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWordsize(
      _wordsize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  connectedNFT(overrides?: CallOverrides): Promise<string>;

  emptyWordbank(
    category: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  readWordbank(category: string, overrides?: CallOverrides): Promise<string[]>;

  readWordsize(overrides?: CallOverrides): Promise<BigNumber>;

  replaceWordbank(
    category: string,
    words: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  requestRandomWordFromBank(
    arg0: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setConnectedNFT(
    _connectedNFT: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWordsize(
    _wordsize: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    connectedNFT(overrides?: CallOverrides): Promise<string>;

    emptyWordbank(category: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    readWordbank(
      category: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    readWordsize(overrides?: CallOverrides): Promise<BigNumber>;

    replaceWordbank(
      category: string,
      words: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    requestRandomWordFromBank(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string[]] & { randomWords: string[] }>;

    setConnectedNFT(
      _connectedNFT: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWordsize(
      _wordsize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(to: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferRequested(address,address)"(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    connectedNFT(overrides?: CallOverrides): Promise<BigNumber>;

    emptyWordbank(
      category: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    readWordbank(
      category: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readWordsize(overrides?: CallOverrides): Promise<BigNumber>;

    replaceWordbank(
      category: string,
      words: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    requestRandomWordFromBank(
      arg0: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    setConnectedNFT(
      _connectedNFT: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWordsize(
      _wordsize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    connectedNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emptyWordbank(
      category: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readWordbank(
      category: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readWordsize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    replaceWordbank(
      category: string,
      words: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    requestRandomWordFromBank(
      arg0: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setConnectedNFT(
      _connectedNFT: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWordsize(
      _wordsize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
