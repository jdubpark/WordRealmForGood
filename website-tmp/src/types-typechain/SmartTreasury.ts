/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface SmartTreasuryInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "evaluateWeather()": FunctionFragment;
    "fundReleaseRecipient()": FunctionFragment;
    "fundTokens(uint256)": FunctionFragment;
    "handleOracleFulfillment(bytes32,bytes,bytes)": FunctionFragment;
    "isReleaseTriggered()": FunctionFragment;
    "latitude()": FunctionFragment;
    "longitude()": FunctionFragment;
    "maxReleaseAmountPerCase()": FunctionFragment;
    "minWindThreshold()": FunctionFragment;
    "owner()": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "s_donId()": FunctionFragment;
    "s_lastRequestId()": FunctionFragment;
    "s_lastUpkeepTimeStamp()": FunctionFragment;
    "s_responseCounter()": FunctionFragment;
    "s_updateInterval()": FunctionFragment;
    "s_upkeepCounter()": FunctionFragment;
    "setConfig(uint64,uint32,uint256,address)": FunctionFragment;
    "setDonId(bytes32)": FunctionFragment;
    "setFundTokens(address[])": FunctionFragment;
    "setLatitude(string)": FunctionFragment;
    "setLongitude(string)": FunctionFragment;
    "setMaxReleaseAmountPerCase(uint256)": FunctionFragment;
    "setMinWindThreshold(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "triggerFundReleaseRequest()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "checkUpkeep"
      | "evaluateWeather"
      | "fundReleaseRecipient"
      | "fundTokens"
      | "handleOracleFulfillment"
      | "isReleaseTriggered"
      | "latitude"
      | "longitude"
      | "maxReleaseAmountPerCase"
      | "minWindThreshold"
      | "owner"
      | "performUpkeep"
      | "s_donId"
      | "s_lastRequestId"
      | "s_lastUpkeepTimeStamp"
      | "s_responseCounter"
      | "s_updateInterval"
      | "s_upkeepCounter"
      | "setConfig"
      | "setDonId"
      | "setFundTokens"
      | "setLatitude"
      | "setLongitude"
      | "setMaxReleaseAmountPerCase"
      | "setMinWindThreshold"
      | "transferOwnership"
      | "triggerFundReleaseRequest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "evaluateWeather",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundReleaseRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReleaseTriggered",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "latitude", values?: undefined): string;
  encodeFunctionData(functionFragment: "longitude", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxReleaseAmountPerCase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minWindThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "s_donId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "s_lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastUpkeepTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_responseCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_updateInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_upkeepCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "setDonId", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setFundTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "setLatitude", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLongitude",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxReleaseAmountPerCase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinWindThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerFundReleaseRequest",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evaluateWeather",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundReleaseRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReleaseTriggered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "latitude", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "longitude", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxReleaseAmountPerCase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minWindThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_donId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_lastUpkeepTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_responseCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_updateInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_upkeepCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDonId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFundTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatitude",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLongitude",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxReleaseAmountPerCase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinWindThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerFundReleaseRequest",
    data: BytesLike
  ): Result;

  events: {
    "OCRResponse(bytes32,bytes,bytes)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestFailed(bytes)": EventFragment;
    "RequestFulfilled(bytes32)": EventFragment;
    "RequestSent(bytes32)": EventFragment;
    "WeatherInfoReceived(bytes32,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OCRResponse"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WeatherInfoReceived"): EventFragment;
}

export interface OCRResponseEventObject {
  requestId: string;
  result: string;
  err: string;
}
export type OCRResponseEvent = TypedEvent<
  [string, string, string],
  OCRResponseEventObject
>;

export type OCRResponseEventFilter = TypedEventFilter<OCRResponseEvent>;

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RequestFailedEventObject {
  error: string;
}
export type RequestFailedEvent = TypedEvent<[string], RequestFailedEventObject>;

export type RequestFailedEventFilter = TypedEventFilter<RequestFailedEvent>;

export interface RequestFulfilledEventObject {
  id: string;
}
export type RequestFulfilledEvent = TypedEvent<
  [string],
  RequestFulfilledEventObject
>;

export type RequestFulfilledEventFilter =
  TypedEventFilter<RequestFulfilledEvent>;

export interface RequestSentEventObject {
  id: string;
}
export type RequestSentEvent = TypedEvent<[string], RequestSentEventObject>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export interface WeatherInfoReceivedEventObject {
  requestId: string;
  triggerFundRelease: boolean;
}
export type WeatherInfoReceivedEvent = TypedEvent<
  [string, boolean],
  WeatherInfoReceivedEventObject
>;

export type WeatherInfoReceivedEventFilter =
  TypedEventFilter<WeatherInfoReceivedEvent>;

export interface SmartTreasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SmartTreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkUpkeep(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

    evaluateWeather(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fundReleaseRecipient(overrides?: CallOverrides): Promise<[string]>;

    fundTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    handleOracleFulfillment(
      requestId: BytesLike,
      response: BytesLike,
      err: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isReleaseTriggered(overrides?: CallOverrides): Promise<[boolean]>;

    latitude(overrides?: CallOverrides): Promise<[string]>;

    longitude(overrides?: CallOverrides): Promise<[string]>;

    maxReleaseAmountPerCase(overrides?: CallOverrides): Promise<[BigNumber]>;

    minWindThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    performUpkeep(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    s_donId(overrides?: CallOverrides): Promise<[string]>;

    s_lastRequestId(overrides?: CallOverrides): Promise<[string]>;

    s_lastUpkeepTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_responseCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_updateInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_upkeepCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    setConfig(
      _subscriptionId: BigNumberish,
      _fulfillGasLimit: BigNumberish,
      _updateInterval: BigNumberish,
      _fundReleaseRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDonId(
      newDonId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFundTokens(
      _fundTokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLatitude(
      _latitude: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLongitude(
      _longitude: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxReleaseAmountPerCase(
      _maxReleaseAmountPerCase: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMinWindThreshold(
      _minWindThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    triggerFundReleaseRequest(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkUpkeep(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

  evaluateWeather(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fundReleaseRecipient(overrides?: CallOverrides): Promise<string>;

  fundTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  handleOracleFulfillment(
    requestId: BytesLike,
    response: BytesLike,
    err: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isReleaseTriggered(overrides?: CallOverrides): Promise<boolean>;

  latitude(overrides?: CallOverrides): Promise<string>;

  longitude(overrides?: CallOverrides): Promise<string>;

  maxReleaseAmountPerCase(overrides?: CallOverrides): Promise<BigNumber>;

  minWindThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  performUpkeep(
    arg0: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  s_donId(overrides?: CallOverrides): Promise<string>;

  s_lastRequestId(overrides?: CallOverrides): Promise<string>;

  s_lastUpkeepTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  s_responseCounter(overrides?: CallOverrides): Promise<BigNumber>;

  s_updateInterval(overrides?: CallOverrides): Promise<BigNumber>;

  s_upkeepCounter(overrides?: CallOverrides): Promise<BigNumber>;

  setConfig(
    _subscriptionId: BigNumberish,
    _fulfillGasLimit: BigNumberish,
    _updateInterval: BigNumberish,
    _fundReleaseRecipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDonId(
    newDonId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFundTokens(
    _fundTokens: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLatitude(
    _latitude: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLongitude(
    _longitude: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxReleaseAmountPerCase(
    _maxReleaseAmountPerCase: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMinWindThreshold(
    _minWindThreshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  triggerFundReleaseRequest(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    checkUpkeep(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

    evaluateWeather(overrides?: CallOverrides): Promise<string>;

    fundReleaseRecipient(overrides?: CallOverrides): Promise<string>;

    fundTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    handleOracleFulfillment(
      requestId: BytesLike,
      response: BytesLike,
      err: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isReleaseTriggered(overrides?: CallOverrides): Promise<boolean>;

    latitude(overrides?: CallOverrides): Promise<string>;

    longitude(overrides?: CallOverrides): Promise<string>;

    maxReleaseAmountPerCase(overrides?: CallOverrides): Promise<BigNumber>;

    minWindThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    performUpkeep(arg0: BytesLike, overrides?: CallOverrides): Promise<void>;

    s_donId(overrides?: CallOverrides): Promise<string>;

    s_lastRequestId(overrides?: CallOverrides): Promise<string>;

    s_lastUpkeepTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    s_responseCounter(overrides?: CallOverrides): Promise<BigNumber>;

    s_updateInterval(overrides?: CallOverrides): Promise<BigNumber>;

    s_upkeepCounter(overrides?: CallOverrides): Promise<BigNumber>;

    setConfig(
      _subscriptionId: BigNumberish,
      _fulfillGasLimit: BigNumberish,
      _updateInterval: BigNumberish,
      _fundReleaseRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDonId(newDonId: BytesLike, overrides?: CallOverrides): Promise<void>;

    setFundTokens(
      _fundTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setLatitude(_latitude: string, overrides?: CallOverrides): Promise<void>;

    setLongitude(_longitude: string, overrides?: CallOverrides): Promise<void>;

    setMaxReleaseAmountPerCase(
      _maxReleaseAmountPerCase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinWindThreshold(
      _minWindThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(to: string, overrides?: CallOverrides): Promise<void>;

    triggerFundReleaseRequest(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OCRResponse(bytes32,bytes,bytes)"(
      requestId?: BytesLike | null,
      result?: null,
      err?: null
    ): OCRResponseEventFilter;
    OCRResponse(
      requestId?: BytesLike | null,
      result?: null,
      err?: null
    ): OCRResponseEventFilter;

    "OwnershipTransferRequested(address,address)"(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: string | null,
      to?: string | null
    ): OwnershipTransferredEventFilter;

    "RequestFailed(bytes)"(error?: null): RequestFailedEventFilter;
    RequestFailed(error?: null): RequestFailedEventFilter;

    "RequestFulfilled(bytes32)"(
      id?: BytesLike | null
    ): RequestFulfilledEventFilter;
    RequestFulfilled(id?: BytesLike | null): RequestFulfilledEventFilter;

    "RequestSent(bytes32)"(id?: BytesLike | null): RequestSentEventFilter;
    RequestSent(id?: BytesLike | null): RequestSentEventFilter;

    "WeatherInfoReceived(bytes32,bool)"(
      requestId?: BytesLike | null,
      triggerFundRelease?: null
    ): WeatherInfoReceivedEventFilter;
    WeatherInfoReceived(
      requestId?: BytesLike | null,
      triggerFundRelease?: null
    ): WeatherInfoReceivedEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkUpkeep(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    evaluateWeather(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fundReleaseRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    fundTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleOracleFulfillment(
      requestId: BytesLike,
      response: BytesLike,
      err: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isReleaseTriggered(overrides?: CallOverrides): Promise<BigNumber>;

    latitude(overrides?: CallOverrides): Promise<BigNumber>;

    longitude(overrides?: CallOverrides): Promise<BigNumber>;

    maxReleaseAmountPerCase(overrides?: CallOverrides): Promise<BigNumber>;

    minWindThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    s_donId(overrides?: CallOverrides): Promise<BigNumber>;

    s_lastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    s_lastUpkeepTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    s_responseCounter(overrides?: CallOverrides): Promise<BigNumber>;

    s_updateInterval(overrides?: CallOverrides): Promise<BigNumber>;

    s_upkeepCounter(overrides?: CallOverrides): Promise<BigNumber>;

    setConfig(
      _subscriptionId: BigNumberish,
      _fulfillGasLimit: BigNumberish,
      _updateInterval: BigNumberish,
      _fundReleaseRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDonId(
      newDonId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFundTokens(
      _fundTokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLatitude(
      _latitude: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLongitude(
      _longitude: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxReleaseAmountPerCase(
      _maxReleaseAmountPerCase: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMinWindThreshold(
      _minWindThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    triggerFundReleaseRequest(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    evaluateWeather(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fundReleaseRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleOracleFulfillment(
      requestId: BytesLike,
      response: BytesLike,
      err: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isReleaseTriggered(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latitude(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    longitude(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxReleaseAmountPerCase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minWindThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performUpkeep(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    s_donId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_lastRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_lastUpkeepTimeStamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_responseCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_updateInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_upkeepCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setConfig(
      _subscriptionId: BigNumberish,
      _fulfillGasLimit: BigNumberish,
      _updateInterval: BigNumberish,
      _fundReleaseRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDonId(
      newDonId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFundTokens(
      _fundTokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLatitude(
      _latitude: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLongitude(
      _longitude: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxReleaseAmountPerCase(
      _maxReleaseAmountPerCase: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMinWindThreshold(
      _minWindThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    triggerFundReleaseRequest(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
